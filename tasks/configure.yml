---
- name: Create avatar directory
  become: true
  file:
    path: "/Library/User Pictures/Users"
    state: directory
    mode: 0755
  register: macos_avatar_touch_log
  changed_when: macos_avatar_touch_log.diff.before.state is defined and macos_avatar_touch_log.diff.before.state != "directory"

- set_fact:
    macos_avatar_basename: "{{ ansible_user_id }}.jpg"
  when: macos_avatar.url is defined

- name: Copy remote picture
  become: true
  get_url:
    url: "{{ macos_avatar.url }}"
    dest: "/Library/User Pictures/Users/{{ macos_avatar_basename }}"
    mode: 0644
    force: true
  when: macos_avatar.url is defined

- name: Read current value of JPEGPhoto
  command: dscl . read /Users/"{{ ansible_user_id }}" JPEGPhoto
  register: "dscl_read_jpegphoto_result"
  check_mode: false
  changed_when: false
  when: macos_avatar_basename is defined

- name: Read current value of Picture
  command: dscl . read /Users/"{{ ansible_user_id }}" Picture
  register: "dscl_read_picture_result"
  check_mode: false
  changed_when: false
  when: macos_avatar_basename is defined

- name: Delete HEX picture data
  become: true
  command: dscl . delete /Users/"{{ ansible_user_id }}" JPEGPhoto
  check_mode: false
  when: ( "No such key" not in dscl_read_jpegphoto_result.stderr ) and macos_avatar_basename is defined

- name: Delete existing user account picture
  become: true
  command: dscl . delete /Users/"{{ ansible_user_id }}" Picture
  check_mode: false
  when: not ( "/Library/User Pictures/Users/" + macos_avatar_basename in dscl_read_picture_result.stdout )

- name: Add user account picture
  become: true
  command: dscl . create /Users/"{{ ansible_user_id }}" Picture "/Library/User Pictures/Users/{{ macos_avatar_basename }}"
  check_mode: false
  when: not ( "/Library/User Pictures/Users/" + macos_avatar_basename in dscl_read_picture_result.stdout )
